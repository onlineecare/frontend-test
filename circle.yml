# IMPORTANT PREREQUISITES
#
# • "CircleCI" user needs to be created on AWS with the following policies attached:
#   - AmazonEC2ContainerRegistryPowerUser
#   - AmazonS3ReadOnlyAccess
#
# • Following environment variables need to be set on CircleCI
#   - DOCKER_REGISTRY_URL
#   - KUBERNETES_CONFIG_PASSWORD_DEV
#   - KUBERNETES_CONFIG_PASSWORD_CANARY
#   - KUBERNETES_CONFIG_PASSWORD_PROD
#   - AWS_ACCESS_KEY_ID
#   - AWS_SECRET_ACCESS_KEY
#
# • Kubernetes cluster needs to have been created
# • ~/.kube/config needs to have been put into a S3 bucket (KUBERNETES_CONFIG_STORE)

machine:
  services:
    - docker

  environment:
    DOCKER_REGISTRY_URL: 606042811316.dkr.ecr.us-west-2.amazonaws.com
    KUBERNETES_SERVICE_NAME: lumiere-docker-images

dependencies:
  cache_directories:
    - ~/.kube
  pre:
    - chmod 0777 ensure-kubernetes-is-installed.sh
    - ./ensure-kubernetes-is-installed.sh

deployment:
  dev:
    branch: sprint[1-6]
    commands:
      #- make ARGS="--rm=false" build-prod-image
      - docker build -t ${KUBERNETES_SERVICE_NAME} -f Dockerfile --rm=false .
      - echo "aws configure set default.region eu-central-1"
      - aws configure set default.region us-west-2
      # set default output to JSON
      - echo "aws configure set default.output json"
      - aws configure set default.output json

      # log in to private docker registry on AWS ECR
      - echo "aws ecr get-login --region us-west-2"
      - eval $(aws ecr get-login --region us-west-2)
      # push docker image to private docker registry on AWS ECR
      # overwriting CIRCLE_SHA1 is unfortunately necessary because the automatic version bump also bumps the latest git sha
      # which can lead to deployments trying to deploy an image that doesn't exist
      #- export CIRCLE_SHA1=$(git rev-parse --verify master); ./deployment/push-docker-image-to-aws-ecr.sh
      # tag image with build number
      - echo "docker tag $KUBERNETES_SERVICE_NAME $DOCKER_REGISTRY_URL/$KUBERNETES_SERVICE_NAME:build-$CIRCLE_SHA1"
      - docker tag $KUBERNETES_SERVICE_NAME $DOCKER_REGISTRY_URL/$KUBERNETES_SERVICE_NAME:build-$CIRCLE_SHA1

      # additionally, tag image with "latest"
      - echo "docker tag $KUBERNETES_SERVICE_NAME $DOCKER_REGISTRY_URL/$KUBERNETES_SERVICE_NAME:latest"
      - docker tag $KUBERNETES_SERVICE_NAME $DOCKER_REGISTRY_URL/$KUBERNETES_SERVICE_NAME:latest

      # push image to private docker registry on AWS ECR
      - echo "docker push $DOCKER_REGISTRY_URL/$KUBERNETES_SERVICE_NAME:build-$CIRCLE_SHA1"
      - docker push $DOCKER_REGISTRY_URL/$KUBERNETES_SERVICE_NAME:build-$CIRCLE_SHA1

      - echo "docker push $DOCKER_REGISTRY_URL/$KUBERNETES_SERVICE_NAME:latest"
      - docker push $DOCKER_REGISTRY_URL/$KUBERNETES_SERVICE_NAME:latest
      - cp kubernetes.config ~/.kube/config
      - ~/.kube/kubectl get services
      #- TOTALPODS=`~/.kube/kubectl get pods | wc -l`
      #- RUNNINGPODS=`~/.kube/kubectl get pods | grep Running | wc -l`
      #- echo "Check #${COUNTER}: ${TOTALPODS} Total Pods — ${RUNNINGPODS} Running Pods"
      
      # update kubernetes deployment with new image
      # overwriting CIRCLE_SHA1 is unfortunately necessary because the automatic version bump also bumps the latest git sha
      # which can lead to deployments trying to deploy an image that doesn't exist
      #- export CIRCLE_SHA1=$(git rev-parse --verify master); ./deployment/deploy.sh dev
      - ~/.kube/kubectl run $KUBERNETES_SERVICE_NAME --replicas=5 --labels="service=lumiere-frontend" --image=$DOCKER_REGISTRY_URL/$KUBERNETES_SERVICE_NAME:latest  --port=80
      - ~/.kube/kubectl create -f lumiere-frontend.yml
      - echo "Hola mundo"
